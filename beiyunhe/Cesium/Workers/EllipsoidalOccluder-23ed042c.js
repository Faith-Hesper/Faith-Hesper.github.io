define(["exports","./Transforms-b1e48e05","./Cartesian3-e96ac170","./defaultValue-9f6a6288","./defined-64766648","./Ellipsoid-fa58f06f","./Cartesian2-0a34ed75"],(function(i,t,e,n,a,o,s){"use strict";function r(i,t){this._ellipsoid=i,this._cameraPosition=new e.Cartesian3,this._cameraPositionInScaledSpace=new e.Cartesian3,this._distanceToLimbInScaledSpaceSquared=0,a.defined(t)&&(this.cameraPosition=t)}Object.defineProperties(r.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},cameraPosition:{get:function(){return this._cameraPosition},set:function(i){const t=this._ellipsoid.transformPositionToScaledSpace(i,this._cameraPositionInScaledSpace),n=e.Cartesian3.magnitudeSquared(t)-1;e.Cartesian3.clone(i,this._cameraPosition),this._cameraPositionInScaledSpace=t,this._distanceToLimbInScaledSpaceSquared=n}}});const c=new e.Cartesian3;r.prototype.isPointVisible=function(i){return C(this._ellipsoid.transformPositionToScaledSpace(i,c),this._cameraPositionInScaledSpace,this._distanceToLimbInScaledSpaceSquared)},r.prototype.isScaledSpacePointVisible=function(i){return C(i,this._cameraPositionInScaledSpace,this._distanceToLimbInScaledSpaceSquared)};const l=new e.Cartesian3;r.prototype.isScaledSpacePointVisiblePossiblyUnderEllipsoid=function(i,t){const e=this._ellipsoid;let n,o;return a.defined(t)&&t<0&&e.minimumRadius>-t?(o=l,o.x=this._cameraPosition.x/(e.radii.x+t),o.y=this._cameraPosition.y/(e.radii.y+t),o.z=this._cameraPosition.z/(e.radii.z+t),n=o.x*o.x+o.y*o.y+o.z*o.z-1):(o=this._cameraPositionInScaledSpace,n=this._distanceToLimbInScaledSpaceSquared),C(i,o,n)},r.prototype.computeHorizonCullingPoint=function(i,t,e){return f(this._ellipsoid,i,t,e)};const d=o.Ellipsoid.clone(o.Ellipsoid.UNIT_SPHERE);r.prototype.computeHorizonCullingPointPossiblyUnderEllipsoid=function(i,t,e,n){return f(m(this._ellipsoid,e,d),i,t,n)},r.prototype.computeHorizonCullingPointFromVertices=function(i,t,e,n,a){return h(this._ellipsoid,i,t,e,n,a)},r.prototype.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid=function(i,t,e,n,a,o){return h(m(this._ellipsoid,a,d),i,t,e,n,o)};const u=[];r.prototype.computeHorizonCullingPointFromRectangle=function(i,n,a){const o=s.Rectangle.subsample(i,n,0,u),r=t.BoundingSphere.fromPoints(o);if(!(e.Cartesian3.magnitude(r.center)<.1*n.minimumRadius))return this.computeHorizonCullingPoint(r.center,o,a)};const p=new e.Cartesian3;function m(i,t,n){if(a.defined(t)&&t<0&&i.minimumRadius>-t){const a=e.Cartesian3.fromElements(i.radii.x+t,i.radii.y+t,i.radii.z+t,p);i=o.Ellipsoid.fromCartesian3(a,n)}return i}function f(i,t,n,o){a.defined(o)||(o=new e.Cartesian3);const s=b(i,t);let r=0;for(let t=0,e=n.length;t<e;++t){const e=y(i,n[t],s);if(e<0)return;r=Math.max(r,e)}return g(s,r,o)}const S=new e.Cartesian3;function h(i,t,o,s,r,c){a.defined(c)||(c=new e.Cartesian3),s=n.defaultValue(s,3),r=n.defaultValue(r,e.Cartesian3.ZERO);const l=b(i,t);let d=0;for(let t=0,e=o.length;t<e;t+=s){S.x=o[t]+r.x,S.y=o[t+1]+r.y,S.z=o[t+2]+r.z;const e=y(i,S,l);if(e<0)return;d=Math.max(d,e)}return g(l,d,c)}function C(i,t,n){const a=t,o=n,s=e.Cartesian3.subtract(i,a,c),r=-e.Cartesian3.dot(s,a);return!(o<0?r>0:r>o&&r*r/e.Cartesian3.magnitudeSquared(s)>o)}const P=new e.Cartesian3,_=new e.Cartesian3;function y(i,t,n){const a=i.transformPositionToScaledSpace(t,P);let o=e.Cartesian3.magnitudeSquared(a),s=Math.sqrt(o);const r=e.Cartesian3.divideByScalar(a,s,_);o=Math.max(1,o),s=Math.max(1,s);const c=1/s;return 1/(e.Cartesian3.dot(r,n)*c-e.Cartesian3.magnitude(e.Cartesian3.cross(r,n,r))*(Math.sqrt(o-1)*c))}function g(i,t,n){if(!(t<=0||t===1/0||t!=t))return e.Cartesian3.multiplyByScalar(i,t,n)}const z=new e.Cartesian3;function b(i,t){return e.Cartesian3.equals(t,e.Cartesian3.ZERO)?t:(i.transformPositionToScaledSpace(t,z),e.Cartesian3.normalize(z,z))}i.EllipsoidalOccluder=r}));
