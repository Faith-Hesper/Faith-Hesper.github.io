define(["./defined-64766648","./Ellipsoid-fa58f06f","./Cartesian2-0a34ed75","./Transforms-b1e48e05","./Cartesian3-e96ac170","./ComponentDatatype-63fd8cd4","./defaultValue-9f6a6288","./Geometry-dd0ae099","./GeometryAttribute-5ac032ac","./GeometryAttributes-3de79df5","./GeometryOffsetAttribute-2579b8d2","./IndexDatatype-ed8b21cb","./Math-56779564","./PolygonPipeline-d79010c3","./RectangleGeometryLibrary-60cd44e9","./GeographicProjection-868b0b16","./Matrix3-59918a96","./Matrix2-e52b9454","./RuntimeError-cfbf2bc8","./Resource-be841477","./combine-ac72e009","./defer-7878b392","./WebGLConstants-7f557f93","./EllipsoidRhumbLine-cea00df6"],(function(e,t,i,n,o,r,a,l,s,u,c,p,d,f,g,h,y,m,b,_,E,A,G,R){"use strict";const P=new n.BoundingSphere,L=new n.BoundingSphere,v=new o.Cartesian3,w=new i.Rectangle;function C(e,t){const i=e._ellipsoid,n=t.height,o=t.width,a=t.northCap,c=t.southCap;let d=n,f=2,h=0,y=4;a&&(f-=1,d-=1,h+=1,y-=2),c&&(f-=1,d-=1,h+=1,y-=2),h+=f*o+2*d-y;const m=new Float64Array(3*h);let b,_=0,E=0;const A=v;if(a)g.RectangleGeometryLibrary.computePosition(t,i,!1,E,0,A),m[_++]=A.x,m[_++]=A.y,m[_++]=A.z;else for(b=0;b<o;b++)g.RectangleGeometryLibrary.computePosition(t,i,!1,E,b,A),m[_++]=A.x,m[_++]=A.y,m[_++]=A.z;for(b=o-1,E=1;E<n;E++)g.RectangleGeometryLibrary.computePosition(t,i,!1,E,b,A),m[_++]=A.x,m[_++]=A.y,m[_++]=A.z;if(E=n-1,!c)for(b=o-2;b>=0;b--)g.RectangleGeometryLibrary.computePosition(t,i,!1,E,b,A),m[_++]=A.x,m[_++]=A.y,m[_++]=A.z;for(b=0,E=n-2;E>0;E--)g.RectangleGeometryLibrary.computePosition(t,i,!1,E,b,A),m[_++]=A.x,m[_++]=A.y,m[_++]=A.z;const G=m.length/3*2,R=p.IndexDatatype.createTypedArray(m.length/3,G);let P=0;for(let e=0;e<m.length/3-1;e++)R[P++]=e,R[P++]=e+1;R[P++]=m.length/3-1,R[P++]=0;const L=new l.Geometry({attributes:new u.GeometryAttributes,primitiveType:l.PrimitiveType.LINES});return L.attributes.position=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:m}),L.indices=R,L}function x(e){const n=(e=a.defaultValue(e,a.defaultValue.EMPTY_OBJECT)).rectangle,o=a.defaultValue(e.granularity,d.CesiumMath.RADIANS_PER_DEGREE),r=a.defaultValue(e.ellipsoid,t.Ellipsoid.WGS84),l=a.defaultValue(e.rotation,0),s=a.defaultValue(e.height,0),u=a.defaultValue(e.extrudedHeight,s);this._rectangle=i.Rectangle.clone(n),this._granularity=o,this._ellipsoid=r,this._surfaceHeight=Math.max(s,u),this._rotation=l,this._extrudedHeight=Math.min(s,u),this._offsetAttribute=e.offsetAttribute,this._workerName="createRectangleOutlineGeometry"}x.packedLength=i.Rectangle.packedLength+t.Ellipsoid.packedLength+5,x.pack=function(e,n,o){return o=a.defaultValue(o,0),i.Rectangle.pack(e._rectangle,n,o),o+=i.Rectangle.packedLength,t.Ellipsoid.pack(e._ellipsoid,n,o),o+=t.Ellipsoid.packedLength,n[o++]=e._granularity,n[o++]=e._surfaceHeight,n[o++]=e._rotation,n[o++]=e._extrudedHeight,n[o]=a.defaultValue(e._offsetAttribute,-1),n};const D=new i.Rectangle,H=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),S={rectangle:D,ellipsoid:H,granularity:void 0,height:void 0,rotation:void 0,extrudedHeight:void 0,offsetAttribute:void 0};x.unpack=function(n,o,r){o=a.defaultValue(o,0);const l=i.Rectangle.unpack(n,o,D);o+=i.Rectangle.packedLength;const s=t.Ellipsoid.unpack(n,o,H);o+=t.Ellipsoid.packedLength;const u=n[o++],c=n[o++],p=n[o++],d=n[o++],f=n[o];return e.defined(r)?(r._rectangle=i.Rectangle.clone(l,r._rectangle),r._ellipsoid=t.Ellipsoid.clone(s,r._ellipsoid),r._surfaceHeight=c,r._rotation=p,r._extrudedHeight=d,r._offsetAttribute=-1===f?void 0:f,r):(S.granularity=u,S.height=c,S.rotation=p,S.extrudedHeight=d,S.offsetAttribute=-1===f?void 0:f,new x(S))};const k=new t.Cartographic;return x.createGeometry=function(t){const i=t._rectangle,o=t._ellipsoid,a=g.RectangleGeometryLibrary.computeOptions(i,t._granularity,t._rotation,0,w,k);let u,h;if(d.CesiumMath.equalsEpsilon(i.north,i.south,d.CesiumMath.EPSILON10)||d.CesiumMath.equalsEpsilon(i.east,i.west,d.CesiumMath.EPSILON10))return;const y=t._surfaceHeight,m=t._extrudedHeight;let b;if(!d.CesiumMath.equalsEpsilon(y,m,0,d.CesiumMath.EPSILON2)){if(u=function(e,t){const i=e._surfaceHeight,n=e._extrudedHeight,o=e._ellipsoid,r=n,a=i,l=C(e,t),s=t.height,u=t.width,c=f.PolygonPipeline.scaleToGeodeticHeight(l.attributes.position.values,a,o,!1);let d=c.length;const g=new Float64Array(2*d);g.set(c);const h=f.PolygonPipeline.scaleToGeodeticHeight(l.attributes.position.values,r,o);g.set(h,d),l.attributes.position.values=g;const y=t.northCap,m=t.southCap;let b=4;y&&(b-=1),m&&(b-=1);const _=2*(g.length/3+b),E=p.IndexDatatype.createTypedArray(g.length/3,_);d=g.length/6;let A,G=0;for(let e=0;e<d-1;e++)E[G++]=e,E[G++]=e+1,E[G++]=e+d,E[G++]=e+d+1;if(E[G++]=d-1,E[G++]=0,E[G++]=d+d-1,E[G++]=d,E[G++]=0,E[G++]=d,y)A=s-1;else{const e=u-1;E[G++]=e,E[G++]=e+d,A=u+s-2}if(E[G++]=A,E[G++]=A+d,!m){const e=u+A-1;E[G++]=e,E[G]=e+d}return l.indices=E,l}(t,a),e.defined(t._offsetAttribute)){const e=u.attributes.position.values.length/3;let i=new Uint8Array(e);t._offsetAttribute===c.GeometryOffsetAttribute.TOP?i=i.fill(1,0,e/2):(b=t._offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1,i=i.fill(b)),u.attributes.applyOffset=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:i})}const l=n.BoundingSphere.fromRectangle3D(i,o,y,L),d=n.BoundingSphere.fromRectangle3D(i,o,m,P);h=n.BoundingSphere.union(l,d)}else{if(u=C(t,a),u.attributes.position.values=f.PolygonPipeline.scaleToGeodeticHeight(u.attributes.position.values,y,o,!1),e.defined(t._offsetAttribute)){const e=u.attributes.position.values.length;b=t._offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1;const i=new Uint8Array(e/3).fill(b);u.attributes.applyOffset=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:i})}h=n.BoundingSphere.fromRectangle3D(i,o,y)}return new l.Geometry({attributes:u.attributes,indices:u.indices,primitiveType:l.PrimitiveType.LINES,boundingSphere:h,offsetAttribute:t._offsetAttribute})},function(n,o){return e.defined(o)&&(n=x.unpack(n,o)),n._ellipsoid=t.Ellipsoid.clone(n._ellipsoid),n._rectangle=i.Rectangle.clone(n._rectangle),x.createGeometry(n)}}));
