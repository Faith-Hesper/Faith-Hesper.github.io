define(["./defined-64766648","./Ellipsoid-fa58f06f","./Transforms-b1e48e05","./Cartesian3-e96ac170","./ComponentDatatype-63fd8cd4","./defaultValue-9f6a6288","./Geometry-dd0ae099","./GeometryAttribute-5ac032ac","./GeometryAttributes-3de79df5","./IndexDatatype-ed8b21cb","./Math-56779564","./WallGeometryLibrary-c6d6ac47","./GeographicProjection-868b0b16","./Matrix3-59918a96","./Matrix2-e52b9454","./RuntimeError-cfbf2bc8","./Cartesian2-0a34ed75","./Resource-be841477","./combine-ac72e009","./defer-7878b392","./WebGLConstants-7f557f93","./arrayRemoveDuplicates-d0608faf","./PolylinePipeline-206d6e54","./EllipsoidGeodesic-9e013872","./EllipsoidRhumbLine-cea00df6","./IntersectionTests-39c3b1c1","./Plane-f9bf6226"],(function(e,i,t,n,o,a,s,r,l,m,d,u,p,c,f,h,g,y,_,E,C,H,A,k,G,w,x){"use strict";const b=new n.Cartesian3,L=new n.Cartesian3;function P(t){const o=(t=a.defaultValue(t,a.defaultValue.EMPTY_OBJECT)).positions,s=t.maximumHeights,r=t.minimumHeights,l=a.defaultValue(t.granularity,d.CesiumMath.RADIANS_PER_DEGREE),m=a.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84);this._positions=o,this._minimumHeights=r,this._maximumHeights=s,this._granularity=l,this._ellipsoid=i.Ellipsoid.clone(m),this._workerName="createWallOutlineGeometry";let u=1+o.length*n.Cartesian3.packedLength+2;e.defined(r)&&(u+=r.length),e.defined(s)&&(u+=s.length),this.packedLength=u+i.Ellipsoid.packedLength+1}P.pack=function(t,o,s){let r;s=a.defaultValue(s,0);const l=t._positions;let m=l.length;for(o[s++]=m,r=0;r<m;++r,s+=n.Cartesian3.packedLength)n.Cartesian3.pack(l[r],o,s);const d=t._minimumHeights;if(m=e.defined(d)?d.length:0,o[s++]=m,e.defined(d))for(r=0;r<m;++r)o[s++]=d[r];const u=t._maximumHeights;if(m=e.defined(u)?u.length:0,o[s++]=m,e.defined(u))for(r=0;r<m;++r)o[s++]=u[r];return i.Ellipsoid.pack(t._ellipsoid,o,s),o[s+=i.Ellipsoid.packedLength]=t._granularity,o};const v=i.Ellipsoid.clone(i.Ellipsoid.UNIT_SPHERE),T={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:v,granularity:void 0};return P.unpack=function(t,o,s){let r;o=a.defaultValue(o,0);let l=t[o++];const m=new Array(l);for(r=0;r<l;++r,o+=n.Cartesian3.packedLength)m[r]=n.Cartesian3.unpack(t,o);let d,u;if(l=t[o++],l>0)for(d=new Array(l),r=0;r<l;++r)d[r]=t[o++];if(l=t[o++],l>0)for(u=new Array(l),r=0;r<l;++r)u[r]=t[o++];const p=i.Ellipsoid.unpack(t,o,v),c=t[o+=i.Ellipsoid.packedLength];return e.defined(s)?(s._positions=m,s._minimumHeights=d,s._maximumHeights=u,s._ellipsoid=i.Ellipsoid.clone(p,s._ellipsoid),s._granularity=c,s):(T.positions=m,T.minimumHeights=d,T.maximumHeights=u,T.granularity=c,new P(T))},P.fromConstantHeights=function(i){const t=(i=a.defaultValue(i,a.defaultValue.EMPTY_OBJECT)).positions;let n,o;const s=i.minimumHeight,r=i.maximumHeight,l=e.defined(s),m=e.defined(r);if(l||m){const e=t.length;n=l?new Array(e):void 0,o=m?new Array(e):void 0;for(let i=0;i<e;++i)l&&(n[i]=s),m&&(o[i]=r)}return new P({positions:t,maximumHeights:o,minimumHeights:n,ellipsoid:i.ellipsoid})},P.createGeometry=function(i){const a=i._positions,p=i._minimumHeights,c=i._maximumHeights,f=i._granularity,h=i._ellipsoid,g=u.WallGeometryLibrary.computePositions(h,a,c,p,f,!1);if(!e.defined(g))return;const y=g.bottomPositions,_=g.topPositions;let E=_.length,C=2*E;const H=new Float64Array(C);let A,k=0;for(E/=3,A=0;A<E;++A){const e=3*A,i=n.Cartesian3.fromArray(_,e,b),t=n.Cartesian3.fromArray(y,e,L);H[k++]=t.x,H[k++]=t.y,H[k++]=t.z,H[k++]=i.x,H[k++]=i.y,H[k++]=i.z}const G=new l.GeometryAttributes({position:new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:H})}),w=C/3;C=2*w-4+w;const x=m.IndexDatatype.createTypedArray(w,C);let P=0;for(A=0;A<w-2;A+=2){const e=A,i=A+2,t=n.Cartesian3.fromArray(H,3*e,b),o=n.Cartesian3.fromArray(H,3*i,L);if(n.Cartesian3.equalsEpsilon(t,o,d.CesiumMath.EPSILON10))continue;const a=A+1,s=A+3;x[P++]=a,x[P++]=e,x[P++]=a,x[P++]=s,x[P++]=e,x[P++]=i}return x[P++]=w-2,x[P++]=w-1,new s.Geometry({attributes:G,indices:x,primitiveType:s.PrimitiveType.LINES,boundingSphere:new t.BoundingSphere.fromVertices(H)})},function(t,n){return e.defined(n)&&(t=P.unpack(t,n)),t._ellipsoid=i.Ellipsoid.clone(t._ellipsoid),P.createGeometry(t)}}));
