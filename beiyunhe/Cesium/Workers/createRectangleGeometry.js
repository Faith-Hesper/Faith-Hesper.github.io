define(["./defined-64766648","./Ellipsoid-fa58f06f","./Cartesian2-0a34ed75","./Transforms-b1e48e05","./Cartesian3-e96ac170","./ComponentDatatype-63fd8cd4","./defaultValue-9f6a6288","./Geometry-dd0ae099","./GeometryAttribute-5ac032ac","./GeometryAttributes-3de79df5","./GeometryInstance-a555221e","./GeometryOffsetAttribute-2579b8d2","./GeometryPipeline-92c34dd1","./IndexDatatype-ed8b21cb","./Math-56779564","./Matrix2-e52b9454","./Matrix3-59918a96","./PolygonPipeline-d79010c3","./RectangleGeometryLibrary-60cd44e9","./VertexFormat-01d05a0d","./GeographicProjection-868b0b16","./Resource-be841477","./combine-ac72e009","./defer-7878b392","./RuntimeError-cfbf2bc8","./WebGLConstants-7f557f93","./AttributeCompression-44abee07","./EncodedCartesian3-e0f0a7d1","./IntersectionTests-39c3b1c1","./Plane-f9bf6226","./EllipsoidRhumbLine-cea00df6"],(function(t,e,n,a,o,r,i,s,l,u,c,m,p,d,g,y,f,h,b,_,A,x,w,C,v,R,E,G,F,P,V){"use strict";const L=new o.Cartesian3,D=new o.Cartesian3,M=new o.Cartesian3,T=new o.Cartesian3,O=new n.Rectangle,N=new n.Cartesian2,S=new a.BoundingSphere,I=new a.BoundingSphere;function k(t,e){const n=new s.Geometry({attributes:new u.GeometryAttributes,primitiveType:s.PrimitiveType.TRIANGLES});return n.attributes.position=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e.positions}),t.normal&&(n.attributes.normal=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:e.normals})),t.tangent&&(n.attributes.tangent=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:e.tangents})),t.bitangent&&(n.attributes.bitangent=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:e.bitangents})),n}const H=new o.Cartesian3,z=new o.Cartesian3;function B(t,e){const n=t._vertexFormat,a=t._ellipsoid,i=e.height,s=e.width,u=e.northCap,c=e.southCap;let m=0,p=i,g=i,y=0;u&&(m=1,g-=1,y+=1),c&&(p-=1,g-=1,y+=1),y+=s*g;const h=n.position?new Float64Array(3*y):void 0,_=n.st?new Float32Array(2*y):void 0;let A=0,x=0;const w=L,C=N;let v=Number.MAX_VALUE,R=Number.MAX_VALUE,E=-Number.MAX_VALUE,G=-Number.MAX_VALUE;for(let t=m;t<p;++t)for(let o=0;o<s;++o)b.RectangleGeometryLibrary.computePosition(e,a,n.st,t,o,w,C),h[A++]=w.x,h[A++]=w.y,h[A++]=w.z,n.st&&(_[x++]=C.x,_[x++]=C.y,v=Math.min(v,C.x),R=Math.min(R,C.y),E=Math.max(E,C.x),G=Math.max(G,C.y));if(u&&(b.RectangleGeometryLibrary.computePosition(e,a,n.st,0,0,w,C),h[A++]=w.x,h[A++]=w.y,h[A++]=w.z,n.st&&(_[x++]=C.x,_[x++]=C.y,v=C.x,R=C.y,E=C.x,G=C.y)),c&&(b.RectangleGeometryLibrary.computePosition(e,a,n.st,i-1,0,w,C),h[A++]=w.x,h[A++]=w.y,h[A]=w.z,n.st&&(_[x++]=C.x,_[x]=C.y,v=Math.min(v,C.x),R=Math.min(R,C.y),E=Math.max(E,C.x),G=Math.max(G,C.y))),n.st&&(v<0||R<0||E>1||G>1))for(let t=0;t<_.length;t+=2)_[t]=(_[t]-v)/(E-v),_[t+1]=(_[t+1]-R)/(G-R);const F=function(t,e,n,a){const r=t.length,i=e.normal?new Float32Array(r):void 0,s=e.tangent?new Float32Array(r):void 0,l=e.bitangent?new Float32Array(r):void 0;let u=0;const c=T,m=M;let p=D;if(e.normal||e.tangent||e.bitangent)for(let d=0;d<r;d+=3){const r=o.Cartesian3.fromArray(t,d,L),g=u+1,y=u+2;p=n.geodeticSurfaceNormal(r,p),(e.tangent||e.bitangent)&&(o.Cartesian3.cross(o.Cartesian3.UNIT_Z,p,m),f.Matrix3.multiplyByVector(a,m,m),o.Cartesian3.normalize(m,m),e.bitangent&&o.Cartesian3.normalize(o.Cartesian3.cross(p,m,c),c)),e.normal&&(i[u]=p.x,i[g]=p.y,i[y]=p.z),e.tangent&&(s[u]=m.x,s[g]=m.y,s[y]=m.z),e.bitangent&&(l[u]=c.x,l[g]=c.y,l[y]=c.z),u+=3}return k(e,{positions:t,normals:i,tangents:s,bitangents:l})}(h,n,a,e.tangentRotationMatrix);let P=6*(s-1)*(g-1);u&&(P+=3*(s-1)),c&&(P+=3*(s-1));const V=d.IndexDatatype.createTypedArray(y,P);let O,S=0,I=0;for(O=0;O<g-1;++O){for(let t=0;t<s-1;++t){const t=S,e=t+s,n=e+1,a=t+1;V[I++]=t,V[I++]=e,V[I++]=a,V[I++]=a,V[I++]=e,V[I++]=n,++S}++S}if(u||c){let t=y-1;const e=y-1;let n,a;if(u&&c&&(t=y-2),S=0,u)for(O=0;O<s-1;O++)n=S,a=n+1,V[I++]=t,V[I++]=n,V[I++]=a,++S;if(c)for(S=(g-1)*s,O=0;O<s-1;O++)n=S,a=n+1,V[I++]=n,V[I++]=e,V[I++]=a,++S}return F.indices=V,n.st&&(F.attributes.st=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:_})),F}function U(t,e,n,a,o){return t[e++]=a[n],t[e++]=a[n+1],t[e++]=a[n+2],t[e++]=o[n],t[e++]=o[n+1],t[e]=o[n+2],t}function Y(t,e,n,a){return t[e++]=a[n],t[e++]=a[n+1],t[e++]=a[n],t[e]=a[n+1],t}const q=new _.VertexFormat;function X(e,n){const a=e._shadowVolume,i=e._offsetAttribute,s=e._vertexFormat,u=e._extrudedHeight,y=e._surfaceHeight,f=e._ellipsoid,b=n.height,A=n.width;let x;if(a){const t=_.VertexFormat.clone(s,q);t.normal=!0,e._vertexFormat=t}const w=B(e,n);a&&(e._vertexFormat=s);let C=h.PolygonPipeline.scaleToGeodeticHeight(w.attributes.position.values,y,f,!1);C=new Float64Array(C);let v=C.length;const R=2*v,E=new Float64Array(R);E.set(C);const G=h.PolygonPipeline.scaleToGeodeticHeight(w.attributes.position.values,u,f);E.set(G,v),w.attributes.position.values=E;const F=s.normal?new Float32Array(R):void 0,P=s.tangent?new Float32Array(R):void 0,V=s.bitangent?new Float32Array(R):void 0,O=s.st?new Float32Array(R/3*2):void 0;let N,S,I;if(s.normal){for(S=w.attributes.normal.values,F.set(S),x=0;x<v;x++)S[x]=-S[x];F.set(S,v),w.attributes.normal.values=F}if(a){S=w.attributes.normal.values,s.normal||(w.attributes.normal=void 0);const t=new Float32Array(R);for(x=0;x<v;x++)S[x]=-S[x];t.set(S,v),w.attributes.extrudeDirection=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:t})}const X=t.defined(i);if(X){const t=v/3*2;let e=new Uint8Array(t);i===m.GeometryOffsetAttribute.TOP?e=e.fill(1,0,t/2):(I=i===m.GeometryOffsetAttribute.NONE?0:1,e=e.fill(I)),w.attributes.applyOffset=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:e})}if(s.tangent){const t=w.attributes.tangent.values;for(P.set(t),x=0;x<v;x++)t[x]=-t[x];P.set(t,v),w.attributes.tangent.values=P}if(s.bitangent){const t=w.attributes.bitangent.values;V.set(t),V.set(t,v),w.attributes.bitangent.values=V}s.st&&(N=w.attributes.st.values,O.set(N),O.set(N,v/3*2),w.attributes.st.values=O);const j=w.indices,J=j.length,Q=v/3,W=d.IndexDatatype.createTypedArray(R/3,2*J);for(W.set(j),x=0;x<J;x+=3)W[x+J]=j[x+2]+Q,W[x+1+J]=j[x+1]+Q,W[x+2+J]=j[x]+Q;w.indices=W;const Z=n.northCap,K=n.southCap;let $=b,tt=2,et=0,nt=4,at=4;Z&&(tt-=1,$-=1,et+=1,nt-=2,at-=1),K&&(tt-=1,$-=1,et+=1,nt-=2,at-=1),et+=tt*A+2*$-nt;const ot=2*(et+at);let rt=new Float64Array(3*ot);const it=a?new Float32Array(3*ot):void 0;let st=X?new Uint8Array(ot):void 0,lt=s.st?new Float32Array(2*ot):void 0;const ut=i===m.GeometryOffsetAttribute.TOP;X&&!ut&&(I=i===m.GeometryOffsetAttribute.ALL?1:0,st=st.fill(I));let ct=0,mt=0,pt=0,dt=0;const gt=A*$;let yt;for(x=0;x<gt;x+=A)yt=3*x,rt=U(rt,ct,yt,C,G),ct+=6,s.st&&(lt=Y(lt,mt,2*x,N),mt+=4),a&&(pt+=3,it[pt++]=S[yt],it[pt++]=S[yt+1],it[pt++]=S[yt+2]),ut&&(st[dt++]=1,dt+=1);if(K){const t=Z?gt+1:gt;for(yt=3*t,x=0;x<2;x++)rt=U(rt,ct,yt,C,G),ct+=6,s.st&&(lt=Y(lt,mt,2*t,N),mt+=4),a&&(pt+=3,it[pt++]=S[yt],it[pt++]=S[yt+1],it[pt++]=S[yt+2]),ut&&(st[dt++]=1,dt+=1)}else for(x=gt-A;x<gt;x++)yt=3*x,rt=U(rt,ct,yt,C,G),ct+=6,s.st&&(lt=Y(lt,mt,2*x,N),mt+=4),a&&(pt+=3,it[pt++]=S[yt],it[pt++]=S[yt+1],it[pt++]=S[yt+2]),ut&&(st[dt++]=1,dt+=1);for(x=gt-1;x>0;x-=A)yt=3*x,rt=U(rt,ct,yt,C,G),ct+=6,s.st&&(lt=Y(lt,mt,2*x,N),mt+=4),a&&(pt+=3,it[pt++]=S[yt],it[pt++]=S[yt+1],it[pt++]=S[yt+2]),ut&&(st[dt++]=1,dt+=1);if(Z){const t=gt;for(yt=3*t,x=0;x<2;x++)rt=U(rt,ct,yt,C,G),ct+=6,s.st&&(lt=Y(lt,mt,2*t,N),mt+=4),a&&(pt+=3,it[pt++]=S[yt],it[pt++]=S[yt+1],it[pt++]=S[yt+2]),ut&&(st[dt++]=1,dt+=1)}else for(x=A-1;x>=0;x--)yt=3*x,rt=U(rt,ct,yt,C,G),ct+=6,s.st&&(lt=Y(lt,mt,2*x,N),mt+=4),a&&(pt+=3,it[pt++]=S[yt],it[pt++]=S[yt+1],it[pt++]=S[yt+2]),ut&&(st[dt++]=1,dt+=1);let ft=function(t,e,n){const a=t.length,r=e.normal?new Float32Array(a):void 0,i=e.tangent?new Float32Array(a):void 0,s=e.bitangent?new Float32Array(a):void 0;let l=0,u=0,c=0,m=!0,p=T,d=M,y=D;if(e.normal||e.tangent||e.bitangent)for(let f=0;f<a;f+=6){const h=o.Cartesian3.fromArray(t,f,L),b=o.Cartesian3.fromArray(t,(f+6)%a,H);if(m){const e=o.Cartesian3.fromArray(t,(f+3)%a,z);o.Cartesian3.subtract(b,h,b),o.Cartesian3.subtract(e,h,e),y=o.Cartesian3.normalize(o.Cartesian3.cross(e,b,y),y),m=!1}o.Cartesian3.equalsEpsilon(b,h,g.CesiumMath.EPSILON10)&&(m=!0),(e.tangent||e.bitangent)&&(p=n.geodeticSurfaceNormal(h,p),e.tangent&&(d=o.Cartesian3.normalize(o.Cartesian3.cross(p,y,d),d))),e.normal&&(r[l++]=y.x,r[l++]=y.y,r[l++]=y.z,r[l++]=y.x,r[l++]=y.y,r[l++]=y.z),e.tangent&&(i[u++]=d.x,i[u++]=d.y,i[u++]=d.z,i[u++]=d.x,i[u++]=d.y,i[u++]=d.z),e.bitangent&&(s[c++]=p.x,s[c++]=p.y,s[c++]=p.z,s[c++]=p.x,s[c++]=p.y,s[c++]=p.z)}return k(e,{positions:t,normals:r,tangents:i,bitangents:s})}(rt,s,f);s.st&&(ft.attributes.st=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:lt})),a&&(ft.attributes.extrudeDirection=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:it})),X&&(ft.attributes.applyOffset=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:st}));const ht=d.IndexDatatype.createTypedArray(ot,6*et);let bt,_t,At,xt;v=rt.length/3;let wt=0;for(x=0;x<v-1;x+=2){bt=x,xt=(bt+2)%v;const t=o.Cartesian3.fromArray(rt,3*bt,H),e=o.Cartesian3.fromArray(rt,3*xt,z);o.Cartesian3.equalsEpsilon(t,e,g.CesiumMath.EPSILON10)||(_t=(bt+1)%v,At=(_t+2)%v,ht[wt++]=bt,ht[wt++]=_t,ht[wt++]=xt,ht[wt++]=xt,ht[wt++]=_t,ht[wt++]=At)}return ft.indices=ht,ft=p.GeometryPipeline.combineInstances([new c.GeometryInstance({geometry:w}),new c.GeometryInstance({geometry:ft})]),ft[0]}const j=[new o.Cartesian3,new o.Cartesian3,new o.Cartesian3,new o.Cartesian3],J=new e.Cartographic,Q=new e.Cartographic;function W(t,e,a,o,r){if(0===a)return n.Rectangle.clone(t,r);const i=b.RectangleGeometryLibrary.computeOptions(t,e,a,0,O,J),s=i.height,l=i.width,u=j;return b.RectangleGeometryLibrary.computePosition(i,o,!1,0,0,u[0]),b.RectangleGeometryLibrary.computePosition(i,o,!1,0,l-1,u[1]),b.RectangleGeometryLibrary.computePosition(i,o,!1,s-1,0,u[2]),b.RectangleGeometryLibrary.computePosition(i,o,!1,s-1,l-1,u[3]),n.Rectangle.fromCartesianArray(u,o,r)}function Z(t){const a=(t=i.defaultValue(t,i.defaultValue.EMPTY_OBJECT)).rectangle,o=i.defaultValue(t.height,0),r=i.defaultValue(t.extrudedHeight,o);this._rectangle=n.Rectangle.clone(a),this._granularity=i.defaultValue(t.granularity,g.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.Ellipsoid.clone(i.defaultValue(t.ellipsoid,e.Ellipsoid.WGS84)),this._surfaceHeight=Math.max(o,r),this._rotation=i.defaultValue(t.rotation,0),this._stRotation=i.defaultValue(t.stRotation,0),this._vertexFormat=_.VertexFormat.clone(i.defaultValue(t.vertexFormat,_.VertexFormat.DEFAULT)),this._extrudedHeight=Math.min(o,r),this._shadowVolume=i.defaultValue(t.shadowVolume,!1),this._workerName="createRectangleGeometry",this._offsetAttribute=t.offsetAttribute,this._rotatedRectangle=void 0,this._textureCoordinateRotationPoints=void 0}Z.packedLength=n.Rectangle.packedLength+e.Ellipsoid.packedLength+_.VertexFormat.packedLength+7,Z.pack=function(t,a,o){return o=i.defaultValue(o,0),n.Rectangle.pack(t._rectangle,a,o),o+=n.Rectangle.packedLength,e.Ellipsoid.pack(t._ellipsoid,a,o),o+=e.Ellipsoid.packedLength,_.VertexFormat.pack(t._vertexFormat,a,o),o+=_.VertexFormat.packedLength,a[o++]=t._granularity,a[o++]=t._surfaceHeight,a[o++]=t._rotation,a[o++]=t._stRotation,a[o++]=t._extrudedHeight,a[o++]=t._shadowVolume?1:0,a[o]=i.defaultValue(t._offsetAttribute,-1),a};const K=new n.Rectangle,$=e.Ellipsoid.clone(e.Ellipsoid.UNIT_SPHERE),tt={rectangle:K,ellipsoid:$,vertexFormat:q,granularity:void 0,height:void 0,rotation:void 0,stRotation:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};Z.unpack=function(a,o,r){o=i.defaultValue(o,0);const s=n.Rectangle.unpack(a,o,K);o+=n.Rectangle.packedLength;const l=e.Ellipsoid.unpack(a,o,$);o+=e.Ellipsoid.packedLength;const u=_.VertexFormat.unpack(a,o,q);o+=_.VertexFormat.packedLength;const c=a[o++],m=a[o++],p=a[o++],d=a[o++],g=a[o++],y=1===a[o++],f=a[o];return t.defined(r)?(r._rectangle=n.Rectangle.clone(s,r._rectangle),r._ellipsoid=e.Ellipsoid.clone(l,r._ellipsoid),r._vertexFormat=_.VertexFormat.clone(u,r._vertexFormat),r._granularity=c,r._surfaceHeight=m,r._rotation=p,r._stRotation=d,r._extrudedHeight=g,r._shadowVolume=y,r._offsetAttribute=-1===f?void 0:f,r):(tt.granularity=c,tt.height=m,tt.rotation=p,tt.stRotation=d,tt.extrudedHeight=g,tt.shadowVolume=y,tt.offsetAttribute=-1===f?void 0:f,new Z(tt))},Z.computeRectangle=function(t,n){const a=(t=i.defaultValue(t,i.defaultValue.EMPTY_OBJECT)).rectangle,o=i.defaultValue(t.granularity,g.CesiumMath.RADIANS_PER_DEGREE),r=i.defaultValue(t.ellipsoid,e.Ellipsoid.WGS84);return W(a,o,i.defaultValue(t.rotation,0),r,n)};const et=new f.Matrix3,nt=new a.Quaternion,at=new e.Cartographic;Z.createGeometry=function(e){if(g.CesiumMath.equalsEpsilon(e._rectangle.north,e._rectangle.south,g.CesiumMath.EPSILON10)||g.CesiumMath.equalsEpsilon(e._rectangle.east,e._rectangle.west,g.CesiumMath.EPSILON10))return;let o=e._rectangle;const i=e._ellipsoid,u=e._rotation,c=e._stRotation,p=e._vertexFormat,d=b.RectangleGeometryLibrary.computeOptions(o,e._granularity,u,c,O,J,Q),y=et;if(0!==c||0!==u){const t=n.Rectangle.center(o,at),e=i.geodeticSurfaceNormalCartographic(t,H);a.Quaternion.fromAxisAngle(e,-c,nt),f.Matrix3.fromQuaternion(nt,y)}else f.Matrix3.clone(f.Matrix3.IDENTITY,y);const _=e._surfaceHeight,A=e._extrudedHeight,x=!g.CesiumMath.equalsEpsilon(_,A,0,g.CesiumMath.EPSILON2);let w,C;if(d.lonScalar=1/e._rectangle.width,d.latScalar=1/e._rectangle.height,d.tangentRotationMatrix=y,o=e._rectangle,x){w=X(e,d);const t=a.BoundingSphere.fromRectangle3D(o,i,_,I),n=a.BoundingSphere.fromRectangle3D(o,i,A,S);C=a.BoundingSphere.union(t,n)}else{if(w=B(e,d),w.attributes.position.values=h.PolygonPipeline.scaleToGeodeticHeight(w.attributes.position.values,_,i,!1),t.defined(e._offsetAttribute)){const t=w.attributes.position.values.length,n=e._offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1,a=new Uint8Array(t/3).fill(n);w.attributes.applyOffset=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:a})}C=a.BoundingSphere.fromRectangle3D(o,i,_)}return p.position||delete w.attributes.position,new s.Geometry({attributes:w.attributes,indices:w.indices,primitiveType:w.primitiveType,boundingSphere:C,offsetAttribute:e._offsetAttribute})},Z.createShadowVolume=function(t,e,n){const a=t._granularity,o=t._ellipsoid,r=e(a,o),i=n(a,o);return new Z({rectangle:t._rectangle,rotation:t._rotation,ellipsoid:o,stRotation:t._stRotation,granularity:a,extrudedHeight:i,height:r,vertexFormat:_.VertexFormat.POSITION_ONLY,shadowVolume:!0})};const ot=new n.Rectangle,rt=[new n.Cartesian2,new n.Cartesian2,new n.Cartesian2],it=new y.Matrix2,st=new e.Cartographic;return Object.defineProperties(Z.prototype,{rectangle:{get:function(){return t.defined(this._rotatedRectangle)||(this._rotatedRectangle=W(this._rectangle,this._granularity,this._rotation,this._ellipsoid)),this._rotatedRectangle}},textureCoordinateRotationPoints:{get:function(){return t.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(t){if(0===t._stRotation)return[0,0,0,1,1,0];const e=n.Rectangle.clone(t._rectangle,ot),a=t._granularity,o=t._ellipsoid,r=W(e,a,t._rotation-t._stRotation,o,ot),i=rt;i[0].x=r.west,i[0].y=r.south,i[1].x=r.west,i[1].y=r.north,i[2].x=r.east,i[2].y=r.south;const s=t.rectangle,l=y.Matrix2.fromRotation(t._stRotation,it),u=n.Rectangle.center(s,st);for(let t=0;t<3;++t){const e=i[t];e.x-=u.longitude,e.y-=u.latitude,y.Matrix2.multiplyByVector(l,e,e),e.x+=u.longitude,e.y+=u.latitude,e.x=(e.x-s.west)/s.width,e.y=(e.y-s.south)/s.height}const c=i[0],m=i[1],p=i[2],d=new Array(6);return n.Cartesian2.pack(c,d),n.Cartesian2.pack(m,d,2),n.Cartesian2.pack(p,d,4),d}(this)),this._textureCoordinateRotationPoints}}}),function(a,o){return t.defined(o)&&(a=Z.unpack(a,o)),a._ellipsoid=e.Ellipsoid.clone(a._ellipsoid),a._rectangle=n.Rectangle.clone(a._rectangle),Z.createGeometry(a)}}));
