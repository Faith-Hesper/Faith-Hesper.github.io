define(["exports","./AxisAlignedBoundingBox-8b4e9f9c","./Cartesian2-0a34ed75","./Cartesian3-e96ac170","./Matrix2-e52b9454","./defaultValue-9f6a6288","./defined-64766648","./Ellipsoid-fa58f06f","./IntersectionTests-39c3b1c1","./Plane-f9bf6226","./Transforms-b1e48e05"],(function(t,n,e,i,o,r,s,a,l,c,d){"use strict";const p=new o.Cartesian4;function u(t,n){t=(n=r.defaultValue(n,a.Ellipsoid.WGS84)).scaleToGeodeticSurface(t);const e=d.Transforms.eastNorthUpToFixedFrame(t,n);this._ellipsoid=n,this._origin=t,this._xAxis=i.Cartesian3.fromCartesian4(o.Matrix4.getColumn(e,0,p)),this._yAxis=i.Cartesian3.fromCartesian4(o.Matrix4.getColumn(e,1,p));const s=i.Cartesian3.fromCartesian4(o.Matrix4.getColumn(e,2,p));this._plane=c.Plane.fromPointNormal(t,s)}Object.defineProperties(u.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},origin:{get:function(){return this._origin}},plane:{get:function(){return this._plane}},xAxis:{get:function(){return this._xAxis}},yAxis:{get:function(){return this._yAxis}},zAxis:{get:function(){return this._plane.normal}}});const f=new n.AxisAlignedBoundingBox;u.fromPoints=function(t,e){return new u(n.AxisAlignedBoundingBox.fromPoints(t,f).center,e)};const h=new l.Ray,x=new i.Cartesian3;u.prototype.projectPointOntoPlane=function(t,n){const o=h;o.origin=t,i.Cartesian3.normalize(t,o.direction);let r=l.IntersectionTests.rayPlane(o,this._plane,x);if(s.defined(r)||(i.Cartesian3.negate(o.direction,o.direction),r=l.IntersectionTests.rayPlane(o,this._plane,x)),s.defined(r)){const t=i.Cartesian3.subtract(r,this._origin,r),o=i.Cartesian3.dot(this._xAxis,t),a=i.Cartesian3.dot(this._yAxis,t);return s.defined(n)?(n.x=o,n.y=a,n):new e.Cartesian2(o,a)}},u.prototype.projectPointsOntoPlane=function(t,n){s.defined(n)||(n=[]);let e=0;const i=t.length;for(let o=0;o<i;o++){const i=this.projectPointOntoPlane(t[o],n[e]);s.defined(i)&&(n[e]=i,e++)}return n.length=e,n},u.prototype.projectPointToNearestOnPlane=function(t,n){s.defined(n)||(n=new e.Cartesian2);const o=h;o.origin=t,i.Cartesian3.clone(this._plane.normal,o.direction);let r=l.IntersectionTests.rayPlane(o,this._plane,x);s.defined(r)||(i.Cartesian3.negate(o.direction,o.direction),r=l.IntersectionTests.rayPlane(o,this._plane,x));const a=i.Cartesian3.subtract(r,this._origin,r),c=i.Cartesian3.dot(this._xAxis,a),d=i.Cartesian3.dot(this._yAxis,a);return n.x=c,n.y=d,n},u.prototype.projectPointsToNearestOnPlane=function(t,n){s.defined(n)||(n=[]);const e=t.length;n.length=e;for(let i=0;i<e;i++)n[i]=this.projectPointToNearestOnPlane(t[i],n[i]);return n};const g=new i.Cartesian3;u.prototype.projectPointOntoEllipsoid=function(t,n){s.defined(n)||(n=new i.Cartesian3);const e=this._ellipsoid,o=this._origin,r=this._xAxis,a=this._yAxis,l=g;return i.Cartesian3.multiplyByScalar(r,t.x,l),n=i.Cartesian3.add(o,l,n),i.Cartesian3.multiplyByScalar(a,t.y,l),i.Cartesian3.add(n,l,n),e.scaleToGeocentricSurface(n,n),n},u.prototype.projectPointsOntoEllipsoid=function(t,n){const e=t.length;s.defined(n)?n.length=e:n=new Array(e);for(let i=0;i<e;++i)n[i]=this.projectPointOntoEllipsoid(t[i],n[i]);return n},t.EllipsoidTangentPlane=u}));
