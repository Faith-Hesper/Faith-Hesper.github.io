define(["./AttributeCompression-44abee07","./Cartesian3-e96ac170","./Ellipsoid-fa58f06f","./Math-56779564","./Cartesian2-0a34ed75","./createTaskProcessorWorker-03824364","./ComponentDatatype-63fd8cd4","./defaultValue-9f6a6288","./defined-64766648","./WebGLConstants-7f557f93","./Matrix2-e52b9454","./Matrix3-59918a96","./RuntimeError-cfbf2bc8"],(function(e,t,a,r,n,i,o,s,c,u,l,p,d){"use strict";const f=32767,h=new a.Cartographic,m=new t.Cartesian3,C=new n.Rectangle,g=new a.Ellipsoid,b={min:void 0,max:void 0};return i.createTaskProcessorWorker((function(i,o){const s=new Uint16Array(i.positions);!function(e){e=new Float64Array(e);let t=0;b.min=e[t++],b.max=e[t++],n.Rectangle.unpack(e,t,C),t+=n.Rectangle.packedLength,a.Ellipsoid.unpack(e,t,g)}(i.packedBuffer);const c=C,u=g,l=b.min,p=b.max,d=s.length/3,k=s.subarray(0,d),w=s.subarray(d,2*d),y=s.subarray(2*d,3*d);e.AttributeCompression.zigZagDeltaDecode(k,w,y);const M=new Float64Array(s.length);for(let e=0;e<d;++e){const n=k[e],i=w[e],o=y[e],s=r.CesiumMath.lerp(c.west,c.east,n/f),d=r.CesiumMath.lerp(c.south,c.north,i/f),C=r.CesiumMath.lerp(l,p,o/f),g=a.Cartographic.fromRadians(s,d,C,h),b=u.cartographicToCartesian(g,m);t.Cartesian3.pack(b,M,3*e)}return o.push(M.buffer),{positions:M.buffer}}))}));
