define(["./ComponentDatatype-63fd8cd4","./defined-64766648","./IndexDatatype-ed8b21cb","./RuntimeError-cfbf2bc8","./createTaskProcessorWorker-03824364","./defaultValue-9f6a6288","./WebGLConstants-7f557f93","./Math-56779564"],(function(t,e,r,n,o,a,i,s){"use strict";let u;function c(t,e){const n=t.num_points(),o=t.num_faces(),a=new u.DracoInt32Array,i=3*o,s=r.IndexDatatype.createTypedArray(n,i);let c=0;for(let r=0;r<o;++r)e.GetFaceFromMesh(t,r,a),s[c+0]=a.GetValue(0),s[c+1]=a.GetValue(1),s[c+2]=a.GetValue(2),c+=3;return u.destroy(a),{typedArray:s,numberOfIndices:i}}function d(r,n,o){const a=r.num_points(),i=o.num_components();let s,c=new u.AttributeQuantizationTransform;if(c.InitFromAttribute(o)){const t=new Array(i);for(let e=0;e<i;++e)t[e]=c.min_value(e);s={quantizationBits:c.quantization_bits(),minValues:t,range:c.range(),octEncoded:!1}}u.destroy(c),c=new u.AttributeOctahedronTransform,c.InitFromAttribute(o)&&(s={quantizationBits:c.quantization_bits(),octEncoded:!0}),u.destroy(c);const d=a*i;let f;f=e.defined(s)?function(t,e,r,n,o){let a,i;n.quantizationBits<=8?(i=new u.DracoUInt8Array,a=new Uint8Array(o),e.GetAttributeUInt8ForAllPoints(t,r,i)):n.quantizationBits<=16?(i=new u.DracoUInt16Array,a=new Uint16Array(o),e.GetAttributeUInt16ForAllPoints(t,r,i)):(i=new u.DracoFloat32Array,a=new Float32Array(o),e.GetAttributeFloatForAllPoints(t,r,i));for(let t=0;t<o;++t)a[t]=i.GetValue(t);return u.destroy(i),a}(r,n,o,s,d):function(t,e,r,n){let o,a;switch(r.data_type()){case 1:case 11:a=new u.DracoInt8Array,o=new Int8Array(n),e.GetAttributeInt8ForAllPoints(t,r,a);break;case 2:a=new u.DracoUInt8Array,o=new Uint8Array(n),e.GetAttributeUInt8ForAllPoints(t,r,a);break;case 3:a=new u.DracoInt16Array,o=new Int16Array(n),e.GetAttributeInt16ForAllPoints(t,r,a);break;case 4:a=new u.DracoUInt16Array,o=new Uint16Array(n),e.GetAttributeUInt16ForAllPoints(t,r,a);break;case 5:case 7:a=new u.DracoInt32Array,o=new Int32Array(n),e.GetAttributeInt32ForAllPoints(t,r,a);break;case 6:case 8:a=new u.DracoUInt32Array,o=new Uint32Array(n),e.GetAttributeUInt32ForAllPoints(t,r,a);break;case 9:case 10:a=new u.DracoFloat32Array,o=new Float32Array(n),e.GetAttributeFloatForAllPoints(t,r,a)}for(let t=0;t<n;++t)o[t]=a.GetValue(t);return u.destroy(a),o}(r,n,o,d);const y=t.ComponentDatatype.fromTypedArray(f);return{array:f,data:{componentsPerAttribute:i,componentDatatype:y,byteOffset:o.byte_offset(),byteStride:t.ComponentDatatype.getSizeInBytes(y)*i,normalized:o.normalized(),quantization:s}}}function f(t){return e.defined(t.bufferView)?function(t){const e=new u.Decoder,r=["POSITION","NORMAL","COLOR","TEX_COORD"];if(t.dequantizeInShader)for(let t=0;t<r.length;++t)e.SkipAttributeTransform(u[r[t]]);const o=t.bufferView,a=new u.DecoderBuffer;if(a.Init(t.array,o.byteLength),e.GetEncodedGeometryType(a)!==u.TRIANGULAR_MESH)throw new n.RuntimeError("Unsupported draco mesh geometry type.");const i=new u.Mesh,s=e.DecodeBufferToMesh(a,i);if(!s.ok()||0===i.ptr)throw new n.RuntimeError(`Error decoding draco mesh geometry: ${s.error_msg()}`);u.destroy(a);const f={},y=t.compressedAttributes;for(const t in y)if(y.hasOwnProperty(t)){const r=y[t],n=e.GetAttributeByUniqueId(i,r);f[t]=d(i,e,n)}const A={indexArray:c(i,e),attributeData:f};return u.destroy(i),u.destroy(e),A}(t):function(t){const e=new u.Decoder;t.dequantizeInShader&&(e.SkipAttributeTransform(u.POSITION),e.SkipAttributeTransform(u.NORMAL));const r=new u.DecoderBuffer;if(r.Init(t.buffer,t.buffer.length),e.GetEncodedGeometryType(r)!==u.POINT_CLOUD)throw new n.RuntimeError("Draco geometry type must be POINT_CLOUD.");const o=new u.PointCloud,a=e.DecodeBufferToPointCloud(r,o);if(!a.ok()||0===o.ptr)throw new n.RuntimeError(`Error decoding draco point cloud: ${a.error_msg()}`);u.destroy(r);const i={},s=t.properties;for(const t in s)if(s.hasOwnProperty(t)){let r;if("POSITION"===t||"NORMAL"===t){const n=e.GetAttributeId(o,u[t]);r=e.GetAttribute(o,n)}else{const n=s[t];r=e.GetAttributeByUniqueId(o,n)}i[t]=d(o,e,r)}return u.destroy(o),u.destroy(e),i}(t)}function y(t){u=t,self.onmessage=o.createTaskProcessorWorker(f),self.postMessage(!0)}return function(t){const r=t.data.webAssemblyConfig;if(e.defined(r))return require([r.modulePath],(function(t){e.defined(r.wasmBinaryFile)?(e.defined(t)||(t=self.DracoDecoderModule),t(r).then((function(t){y(t)}))):y(t())}))}}));
