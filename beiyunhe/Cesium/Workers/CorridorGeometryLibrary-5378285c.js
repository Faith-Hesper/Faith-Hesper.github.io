define(["exports","./Cartesian3-e96ac170","./PolylineVolumeGeometryLibrary-b5caf6df","./defined-64766648","./Math-56779564","./Matrix3-59918a96","./PolylinePipeline-206d6e54","./Transforms-b1e48e05"],(function(a,e,n,t,r,i,s,o){"use strict";const l={},C=new e.Cartesian3,y=new e.Cartesian3,c=new e.Cartesian3,u=new e.Cartesian3,d=[new e.Cartesian3,new e.Cartesian3],p=new e.Cartesian3,m=new e.Cartesian3,g=new e.Cartesian3,h=new e.Cartesian3,f=new e.Cartesian3,w=new e.Cartesian3,x=new e.Cartesian3,z=new e.Cartesian3,P=new e.Cartesian3,A=new e.Cartesian3,B=new o.Quaternion,E=new i.Matrix3;function S(a,t,s,l,c){const u=e.Cartesian3.angleBetween(e.Cartesian3.subtract(t,a,C),e.Cartesian3.subtract(s,a,y)),d=l===n.CornerType.BEVELED?1:Math.ceil(u/r.CesiumMath.toRadians(5))+1,p=3*d,m=new Array(p);let g;m[p-3]=s.x,m[p-2]=s.y,m[p-1]=s.z,g=c?i.Matrix3.fromQuaternion(o.Quaternion.fromAxisAngle(e.Cartesian3.negate(a,C),u/d,B),E):i.Matrix3.fromQuaternion(o.Quaternion.fromAxisAngle(a,u/d,B),E);let h=0;t=e.Cartesian3.clone(t,C);for(let a=0;a<d;a++)t=i.Matrix3.multiplyByVector(g,t,t),m[h++]=t.x,m[h++]=t.y,m[h++]=t.z;return m}function b(a,n,t,r){let i=C;return r||(n=e.Cartesian3.negate(n,n)),i=e.Cartesian3.add(a,n,i),[i.x,i.y,i.z,t.x,t.y,t.z]}function D(a,n,t,r){const i=new Array(a.length),s=new Array(a.length),o=e.Cartesian3.multiplyByScalar(n,t,C),l=e.Cartesian3.negate(o,y);let d=0,p=a.length-1;for(let n=0;n<a.length;n+=3){const t=e.Cartesian3.fromArray(a,n,c),r=e.Cartesian3.add(t,l,u);i[d++]=r.x,i[d++]=r.y,i[d++]=r.z;const C=e.Cartesian3.add(t,o,u);s[p--]=C.z,s[p--]=C.y,s[p--]=C.x}return r.push(i,s),r}l.addAttribute=function(a,e,n,r){const i=e.x,s=e.y,o=e.z;t.defined(n)&&(a[n]=i,a[n+1]=s,a[n+2]=o),t.defined(r)&&(a[r]=o,a[r-1]=s,a[r-2]=i)};const M=new e.Cartesian3,T=new e.Cartesian3;l.computePositions=function(a){const t=a.granularity,i=a.positions,o=a.ellipsoid,l=a.width/2,y=a.cornerType,c=a.saveAttributes;let u=p,B=m,E=g,N=h,L=f,O=w,R=x,V=z,Q=P,U=A,v=[];const G=c?[]:void 0,I=c?[]:void 0;let q,K=i[0],j=i[1];B=e.Cartesian3.normalize(e.Cartesian3.subtract(j,K,B),B),u=o.geodeticSurfaceNormal(K,u),N=e.Cartesian3.normalize(e.Cartesian3.cross(u,B,N),N),c&&(G.push(N.x,N.y,N.z),I.push(u.x,u.y,u.z)),R=e.Cartesian3.clone(K,R),K=j,E=e.Cartesian3.negate(B,E);const k=[];let F;const H=i.length;for(F=1;F<H-1;F++){u=o.geodeticSurfaceNormal(K,u),j=i[F+1],B=e.Cartesian3.normalize(e.Cartesian3.subtract(j,K,B),B),L=e.Cartesian3.normalize(e.Cartesian3.add(B,E,L),L);const a=e.Cartesian3.multiplyByScalar(u,e.Cartesian3.dot(B,u),M);e.Cartesian3.subtract(B,a,a),e.Cartesian3.normalize(a,a);const p=e.Cartesian3.multiplyByScalar(u,e.Cartesian3.dot(E,u),T);e.Cartesian3.subtract(E,p,p),e.Cartesian3.normalize(p,p);if(!r.CesiumMath.equalsEpsilon(Math.abs(e.Cartesian3.dot(a,p)),1,r.CesiumMath.EPSILON7)){L=e.Cartesian3.cross(L,u,L),L=e.Cartesian3.cross(u,L,L),L=e.Cartesian3.normalize(L,L);const a=l/Math.max(.25,e.Cartesian3.magnitude(e.Cartesian3.cross(L,E,C))),r=n.PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(B,E,K,o);L=e.Cartesian3.multiplyByScalar(L,a,L),r?(V=e.Cartesian3.add(K,L,V),U=e.Cartesian3.add(V,e.Cartesian3.multiplyByScalar(N,l,U),U),Q=e.Cartesian3.add(V,e.Cartesian3.multiplyByScalar(N,2*l,Q),Q),d[0]=e.Cartesian3.clone(R,d[0]),d[1]=e.Cartesian3.clone(U,d[1]),q=s.PolylinePipeline.generateArc({positions:d,granularity:t,ellipsoid:o}),v=D(q,N,l,v),c&&(G.push(N.x,N.y,N.z),I.push(u.x,u.y,u.z)),O=e.Cartesian3.clone(Q,O),N=e.Cartesian3.normalize(e.Cartesian3.cross(u,B,N),N),Q=e.Cartesian3.add(V,e.Cartesian3.multiplyByScalar(N,2*l,Q),Q),R=e.Cartesian3.add(V,e.Cartesian3.multiplyByScalar(N,l,R),R),y===n.CornerType.ROUNDED||y===n.CornerType.BEVELED?k.push({leftPositions:S(V,O,Q,y,r)}):k.push({leftPositions:b(K,e.Cartesian3.negate(L,L),Q,r)})):(Q=e.Cartesian3.add(K,L,Q),U=e.Cartesian3.add(Q,e.Cartesian3.negate(e.Cartesian3.multiplyByScalar(N,l,U),U),U),V=e.Cartesian3.add(Q,e.Cartesian3.negate(e.Cartesian3.multiplyByScalar(N,2*l,V),V),V),d[0]=e.Cartesian3.clone(R,d[0]),d[1]=e.Cartesian3.clone(U,d[1]),q=s.PolylinePipeline.generateArc({positions:d,granularity:t,ellipsoid:o}),v=D(q,N,l,v),c&&(G.push(N.x,N.y,N.z),I.push(u.x,u.y,u.z)),O=e.Cartesian3.clone(V,O),N=e.Cartesian3.normalize(e.Cartesian3.cross(u,B,N),N),V=e.Cartesian3.add(Q,e.Cartesian3.negate(e.Cartesian3.multiplyByScalar(N,2*l,V),V),V),R=e.Cartesian3.add(Q,e.Cartesian3.negate(e.Cartesian3.multiplyByScalar(N,l,R),R),R),y===n.CornerType.ROUNDED||y===n.CornerType.BEVELED?k.push({rightPositions:S(Q,O,V,y,r)}):k.push({rightPositions:b(K,L,V,r)})),E=e.Cartesian3.negate(B,E)}K=j}let J;return u=o.geodeticSurfaceNormal(K,u),d[0]=e.Cartesian3.clone(R,d[0]),d[1]=e.Cartesian3.clone(K,d[1]),q=s.PolylinePipeline.generateArc({positions:d,granularity:t,ellipsoid:o}),v=D(q,N,l,v),c&&(G.push(N.x,N.y,N.z),I.push(u.x,u.y,u.z)),y===n.CornerType.ROUNDED&&(J=function(a){let t=p,r=m,i=g,s=a[1];r=e.Cartesian3.fromArray(a[1],s.length-3,r),i=e.Cartesian3.fromArray(a[0],0,i),t=e.Cartesian3.midpoint(r,i,t);const o=S(t,r,i,n.CornerType.ROUNDED,!1),l=a.length-1,C=a[l-1];return s=a[l],r=e.Cartesian3.fromArray(C,C.length-3,r),i=e.Cartesian3.fromArray(s,0,i),t=e.Cartesian3.midpoint(r,i,t),[o,S(t,r,i,n.CornerType.ROUNDED,!1)]}(v)),{positions:v,corners:k,lefts:G,normals:I,endPositions:J}};var N=l;a.CorridorGeometryLibrary=N}));
